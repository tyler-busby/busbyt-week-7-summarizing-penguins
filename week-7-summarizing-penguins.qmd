---
title: "Summarizing Penguins"
author: "Tyler Busby"
format: gfm
execute: 
  echo: true
---

<!-- If you work with a partner, please include their name with "author" above -->

```{r setup}
#| label: setup
#| include: false

library(tidyverse)
library(palmerpenguins)
data(penguins)
```


## Goals for the Activity  

1. Use `mutate()`, `group_by()`, and `summarize()` to answer some questions about the penguins.   
2. Learn a few other `dplyr` functions such as `drop_na()` and `count()` that can be used in summarizing data.  
3. Learn the `dplyr` functions `case_when()` and `across()` to clean up and create new variables.  
4. Connect summarized and created variables and graphics together to answer research questions.  


**THROUGHOUT THE Activity** be sure to follow the Style Guide by doing the following:  

- load the appropriate packages at the beginning of the Quarto document  
- use proper spacing  
- name all code chunks  
- comment at least once in each code chunk to describe why you made your coding decisions  
- add appropriate labels to all graphic axes  
- use appropriate white space  


## Create new variables with `mutate()`

Use `mutate()` to add a new column, while keeping the existing columns. The general structure is:

```{r}
#| eval: false
df |>
  mutate(new_column_name = what_it_contains)
```

For example, if I had a data frame df with columns A and B, I can add a new column C that is the sum of A and B as follows (note: you can also use sum(A,B) here instead of A + B):

```{r}
#| eval: false
df |>
  mutate(C = A + B)
```

For example, we can convert body mass to kilograms:
```{r}
penguins |>
  mutate(body_mass_kg = body_mass_g / 1000)
```

Notice that for some variables we have `NA` listed for missing values.  We can use `drop_na()` to remove the missing values from those variables

```{r}
penguins |> 
  drop_na() #if we leave it blank it will remove any row with an NA
```


```{r}
penguins |> 
  drop_na(sex) #adding a variable, removes rows with NA just for that variable
```


### Evaluating the Bill Size  

Create new variable called `bill_ratio` that is the ratio of length to depth (length/depth)

```{r}
#| label: "create-variable"
penguins <- penguins |> 
  mutate(bill_ratio = bill_length_mm/bill_depth_mm) #create bill ratio variable using length/depth
```


Now create a boxplot of `bill_ratio` split by species.  Be sure to add labels to the axes.  You can add other modifications if you want as well (fill/color, theme, etc).

```{r}
#| label: "create-boxplot"
penguins |> #load penguin data
  ggplot(aes(x = bill_ratio, y = species)) + #create plot with x as bill ratio and y as species
  geom_boxplot(outliers = FALSE) + #create boxplot with no outliers
  geom_jitter(aes(color = species), #add a jitter plot with point color mapped to species
              height = 0.2, #decrease vertical range on points
              alpha = 0.4) + #decrease transparency
  guides(color = "none") + #remove legend for color
  scale_color_viridis_d(option = "cividis") + #change color pallate to cividis
  labs(x = "Bill Ratio (length/depth)", #change x-axis label
       y = "Penguin Species") + #change y-axis label
  theme_classic() #change theme of plot
```


Add three new columns to penguins within one `mutate()` function: one column that contains the bill ratio (bill length / bill depth), one that contains the body mass converted to kg, and one that contains the flipper length converted to meters.

```{r}
"create-3-variables"
penguins <- penguins |>
  mutate(bill_ratio = bill_length_mm/bill_depth_mm, #create bill ratio variable using length/depth
         body_mass_kg = body_mass_g/1000, #create body mass variable in kg
         flipper_length_m = flipper_length_mm/1000) #create flipper length variable in m
```


We can also use `mutate()` to modify an existing variable.  By default, R reports factors in alphabetical order (you may notice in your boxplot they always print in the same order, Adelie, Chinstrap, Gentoo). If we want to reorder, we can use a function `fct_relevel()` from the `forcats` package, which we will learn about in a few weeks. Modify the code below to calculate the `bill_ratio` and then recreate the boxplot from above by species - how does it differ? 

```{r}
#| label: "create-boxplot-2"
penguins |> 
  mutate(species = 
           fct_relevel(species, "Adelie", "Gentoo", "Chinstrap"),
         bill_ratio = bill_length_mm/bill_depth_mm) |> 
  ggplot(aes(x = bill_ratio, y = species)) + #create plot with x as bill ratio and y as species
  geom_boxplot(outliers = FALSE) + #create boxplot with no outliers
  geom_jitter(aes(color = species), #add a jitter plot with point color mapped to species
              height = 0.2, #decrease vertical range on points
              alpha = 0.4) + #decrease transparency
  guides(color = "none") + #remove legend for color
  scale_color_viridis_d(option = "cividis") + #change color pallate to cividis
  labs(x = "Bill Ratio (length/depth)", #change x-axis label
       y = "Penguin Species") + #change y-axis label
  theme_classic() #change theme of plot
```


## Summarize data using `group_by()` and `summarize()`

Use the combination of `group_by()` and `summarize()` to find find summary statistics for different groups, and put them in a nice table.

`group_by()` “takes an existing table and converts it into a grouped table where operations are performed ‘by group’”  

`summarize()` “creates a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarizing all observations in the input. It will contain one column for each grouping variable and one column for each of the summary statistics that you have specified”  

For example, we can calculate the mean and standard deviation for body mass:

```{r}
penguins |>
  group_by(species) |>
  summarize(mass_mean = mean(body_mass_g, na.rm = TRUE),
            mass_sd = sd(body_mass_g, na.rm = TRUE))
```

Note, that `na.rm = TRUE` removes NA from the calculations instead of removing them from the data like `drop_na()`. Often, errors reported with `mean()` and similar functions are because there are `NA` in the data.  

Second Note, if you use `mosaic` in your statistics class, note that `mean()` used here is from base R, so there is no `~` in front of the variable.  If you wanted to use `mosaic` you can, you will just need to modify the syntax:  

- Base R: `mean(x)`  
- Mosaic: `mean(~x)`  



### Group by Species and Sex
Find the mean and standard deviation of body mass in *kilograms* by species and sex.

```{r}
#| label: "find-mean-and-std"
penguins |> #load penguin data
  drop_na(species, sex) |> #remove species and sex variables marked as NA
  mutate(body_mass_kg = body_mass_g/1000) |> #create body mass variable in kg 
  group_by(species, sex) |> #groups variables by species and sex
  summarize(mass_mean_kg = mean(body_mass_kg, na.rm = TRUE), #calculate mean body mass in kg
            mass_sd_kg = sd(body_mass_kg, na.rm = TRUE)) #calculate standard deviation body mass in kg
```


Starting with penguins, create a summary table containing the maximum and minimum length of flippers (call the columns flip_max and flip_min) for just Chinstrap penguins, grouped by island. (Hint - remember `filter()`)

```{r}
#| label: "create-max-min-table"
penguins |>
  filter(species == "Chinstrap") |> #select only Chinstrap
  group_by(island) |> #group by island
  summarize(flip_max = max(flipper_length_mm), #calculate flipper max variable
            flip_min = min(flipper_length_mm)) #calculate flipper min variable
```



Starting with penguins, in a piped sequence:  

- Add a new column called bill_ratio that is the ratio of bill length to bill depth (hint: mutate())  
- Only keep columns species and bill_ratio  
- Group the data by species  
- Create a summary table containing the mean of the bill_ratio variable, by species (name the column in the summary table bill_ratio_mean)  

```{r}
#| label: "following-sequence-1"
penguins |> 
  mutate(bill_ratio = bill_length_mm/bill_depth_mm) |> #create bill ratio variable
  select(species, bill_ratio) |> #only keep species and bill ratio columns
  group_by(species) |> #group by species
  summarize(bill_ratio_mean = mean(bill_ratio, na.rm = TRUE)) #find mean bill ratio
```


## New function `across()`
The `across()` function is especially useful within `summarize()` to efficiently create summary tables with one or more functions applied to multiple variables (columns).

Let’s compare two ways of doing the same thing: creating a summary table of mean values for all penguin size measurements ending in “mm” (bill depth, bill length, flipper length), by species.

Approach 1:
```{r}
penguins |>
  group_by(species) |> 
  summarize(bill_length_mean = mean(bill_length_mm, na.rm = TRUE),
            bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
            flipper_length_mean = mean(flipper_length_mm, na.rm = TRUE))
```

Approach 2: 
```{r}
penguins |>
  group_by(species) |>
  summarize(across(ends_with("mm"), 
                   .fns = mean, 
                   na.rm = TRUE))
```


We can modify multiple names by appending something to the beginning 
```{r}
penguins |>
  group_by(year) |>
  summarise(across(starts_with("bill"), 
                   .fns = max, 
                   na.rm = TRUE, 
                   .names = "max_{.col}"))
```

or ending of the column name:  
```{r}
penguins |>
  group_by(year) |>
  summarise(across(starts_with("bill"), 
                   .fns = max, 
                   na.rm = TRUE, 
                   .names = "{.col}_max"))
```



Starting from penguins, create a summary table that finds the mean and standard deviation for all variables containing the string “length”, grouped by penguin species. Update the column names to start with “avg_” or “sd_”, followed by the original column names.

There’s quite a bit happening here, so a little breakdown:  

- We use `contains("length")` to indicate we’ll apply the functions to any columns with the word “length” in the name  
- Within `list()` is where the functions to be applied across columns are given, and where their “names” of “avg” and “stdev” are set  
- We use `.names =` to define the final column names in the summary table. Here, the name should start with the function “name” specified above (“avg” or “stdev”), then an underscore, then the original column name (that’s what `"{.fn}_{.col}"` will do)  

```{r}
penguins |>
  group_by(species) |>
  summarize(across(contains("length"),
                   list(avg = mean, stdev = sd),
                   na.rm = TRUE,
                   .names = "{.fn}_{.col}"))
```


### Practice with `across()`
Starting with penguins, group data by island then use `across()` to find the median value of groups for any columns containing the string “mm”. 

Bonus Point: The names in the resulting table should be the original column name followed by an underscore, then the word “median” (e.g. `colname_median`).

```{r}
#| label: "create-median-table"
penguins |>
  group_by(island) |> #group by island
  summarize(across(ends_with("mm"), #select columns ending with "mm"
                   .fns = median, #calculate median for each
                   na.rm = TRUE, #remove NA variables
                   .names = "{.col}_median")) #set names as "colname_median"
```

Starting from penguins, write a piped sequence to:  

- Exclude penguins observed on Biscoe Island  
- Only keep variables species through `body_mass_g`  
- Rename the species variable to `spp_penguin`  
- Group the data by `spp_penguin`  
- Find the mean value for any variable containing the string “length”, by penguin species, with column names updated to the original column name appended with "_mean" at the end  
```{r}
#| label: "following-sequence-2"
penguins |>
  filter(island != "Biscoe") |> #remove penguins on Biscoe Island
  select(1:6) |> #only keep variables species through body mass
  rename("spp_penguin" = species) |> #rename species variable to "spp_penguin"
  group_by(spp_penguin) |> #group by species
  summarize(across(contains("length"), #select columns with "length"
                   .fns = mean, #calculate mean for each
                   na.rm = TRUE, #remove NA variables
                   .names = "{.col}_mean")) #set names as "colname_mean"
```


## New Function `count()`

The `dplyr::count()` function wraps a bunch of things into one beautiful friendly line of code to help you find counts of observations by group. To demonstrate what it does, let’s find the counts of penguins in the penguins dataset by species in two different ways:  

- Using `group_by() |> summarize()` with `n()` to count observations  
- Using `count()` to do the exact same thing  

```{r}
penguins |>
  group_by(species) |>
  summarize(n = n())
```

```{r}
penguins |>
  count(species)
```

For example, what does the following code do?
```{r}
penguins |>
  count(species, year) #counts number of penguins by species and year
```

We can combine `count()` with `mutate()` to find proportions and the visualize them - comment the following code:
```{r}
penguins |> 
  count(species, island) |> #counts number of penguins by species and island
  group_by(species) |> #groups by species 
  mutate(total = sum(n),  #creates variable total for each species and island group
         prop = n/total) |>  #creates variable prop for each species and island group
  ggplot(aes(x = island, y = prop, fill = species)) + #creates plot with x mapped to island, y mapped to prop, and color mapped to species
  geom_col(position = position_dodge()) + #sets column position to dodged
  scale_fill_viridis_d() + #changes color scale to viridis color pallatte
  labs(x = "Palmer Islands", #changes x-axis label
       y = "Proportion of Penguin Species per Island", #changes y-axis label
       fill = "Species") + #changes color's legend's label
  theme_minimal() #changes theme to minimal
```

### Practice with `count()`
Starting with penguins, find counts of observation by species, island, and year.
```{r}
#| label: "count-observations"
penguins |> 
  count(species, island, year) #counts number of penguins by species, island, and year
```


Starting with penguins, filter to only keep Adelie and Gentoo penguins, then find counts by species and sex.
```{r}
#| label: "count-observations2"
penguins |> 
  drop_na(species, sex) |> #remove NAs for species and sex
  filter(species == c("Adelie", "Gentoo")) |> #keep only Adelie and Gentoo penguins
  count(species, sex) #counts number of penguins by species and sex
```


## New Function `case_when()`
The `case_when()` function is like a really friendly if-else statement. When used within `mutate()`, it allows you to add a new column containing values dependent on your condition(s).

To penguins, add a new column size_bin that contains:  

- “large” if body mass is greater than 4500 g  
- “medium” if body mass is greater than 3000 g, and less than or equal to 4500 g  
- “small” if body mass is less than or equal to 3000 g  

```{r}
penguins |>
  mutate(size_bin = case_when(
      body_mass_g > 4500 ~ "large",
      body_mass_g > 3000 & body_mass_g <= 4500 ~ "medium",
      body_mass_g <= 3000 ~ "small"
    )
  )
```


### Practice with `case_when()`
Identify what is going on in this code: 

```{r}
penguins |>
  select(species, year, flipper_length_mm) |>  #keep only species, year, and flipper length variables
  rename(study_year = year) |>   #rename year variable to study_year
  filter(species == "Adelie") |>  #select only Adelie penguin species
  mutate(flipper_rank = case_when(   #create flipper rank variable
    flipper_length_mm < 200 ~ 1,   #set lengths less than 200 to 1
    flipper_length_mm >= 200 ~ 2,  #set lengths greater than or equal to 200 to 2
    TRUE ~ 0 # 0 for anything else
  ))
```


Add a new column to penguins called study_year that contains:  

- “Year 1” if the year is 2007  
- “Year 2” if the year is 2008  
- “Year 3” if the year is 2009 

```{r}
penguins |>
  mutate(study_year = case_when(   #create study_year variable
    year == 2007 ~ "Year 1",   #set year 2007 to Year 1
    year == 2008 ~ "Year 2",   #set year 2008 to Year 2
    year == 2009 ~ "Year 3"   #set year 2009 to Year 3
  ))
```


Starting with penguins, only keep observations for chinstrap penguins, then only keep the `flipper_length_mm` and `body_mass_g` variables. Add a new column called `fm_ratio` that contains the ratio of flipper length to body mass for each penguin. Next, add another column named `ratio_bin` which contains the word “high” if `fm_ratio` is greater than or equal to 0.05, “low” if the ratio is less than 0.05, and “no record” if anything else (e.g. NA). 

```{r}
penguins |>
  filter(species == "Chinstrap") |> #select only Chinstrap penguin species
  select(flipper_length_mm, body_mass_g) |> #select only flipper length and body mass columns
  mutate(fm_ratio = flipper_length_mm/body_mass_g, #create fm_ratio variable
         ratio_bin = case_when( #create ratio_bin variable
           fm_ratio >= 0.05 ~ "high", #set high for fm_ratio greater than or equal to 0.05
           fm_ratio < 0.05 ~ "low", #set low for fm_ratio less than 0.05
           TRUE ~ "no record" #no record for anything else
  ))
  
```


## Wrapping Up
The biggest challenge with data wrangling is figuring out what you want to do first and then thinking about how the vocabulary translates to the code.  Once you know *what* you want to do, it is much easier to look up *how* to do it!

